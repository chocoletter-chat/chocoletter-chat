version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017" # MongoDB 포트 매핑
    volumes:
      - mongodb-data:/data/db # 데이터를 영구적으로 저장
    networks:
      - app-network

  spring-boot-app:
    build:
      context: . # 현재 디렉터리의 Dockerfile 사용
    container_name: spring-boot-app
    ports:
      - "8080:8080" # 애플리케이션 포트 매핑
    environment:
      - SPRING_PROFILES_ACTIVE=dev # Spring Boot 프로필 설정
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092 # Kafka 브로커 연결 설정
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/chatdb # MongoDB 연결 설정
    depends_on:
      - mongodb # MongoDB 컨테이너가 먼저 실행되도록 설정
      - kafka
    networks:
      - app-network

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes # 익명 접속 허용 (테스트 환경에서만)
      - ZOO_4LW_COMMANDS_WHITELIST=ruok,stat,conf,isro # Zookeeper 명령어 허용
    ports:
      - "2181:2181" # Zookeeper 포트 매핑
    networks:
      - app-network

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092" # Kafka 브로커 포트 매핑
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092 # 컨테이너 내부에서 호스트 이름 사용
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # Zookeeper 연결 정보
    depends_on:
      - zookeeper # Zookeeper 컨테이너가 먼저 실행되도록 설정
    networks:
      - app-network

volumes:
  mongodb-data: # MongoDB 데이터 영구 저장소

networks:
  app-network:
    driver: bridge